import asyncio
import signal
from datetime import datetime, timedelta
import pytz
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import json
from typing import Dict, Optional
import os
import logging
from dotenv import load_dotenv
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = str(os.getenv('BOT_TOKEN'))
CHAT_ID = int(os.getenv('CHAT_ID')) # —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
#CHAT_ID = -1002391359004 # —Ä–∞–±–æ—á–∏–π —á–∞—Ç
TIMEZONE = pytz.timezone('Asia/Yekaterinburg')
POLL_START_HOUR = int(os.getenv('POLL_START_HOUR'))
POLL_START_MINUTES = int(os.getenv('POLL_START_MINUTES'))
POLL_SHIFT = int(os.getenv('POLL_SHIFT'))
    
with open("schedule.json", "r", encoding="utf-8") as file:
    POLLS = json.load(file)

class TelegramBot:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.dp = Dispatcher()
        self.last_results_message: Dict[str, int] = {}
        self.last_get_poll_message = None
        self.poll_chats = set()
        self.poll_task = None
        self.last_polls: Dict[int, int] = {}
        self.polls_dict = {}
        self.poll_ids = []
        self.set_dish = {}
        self.poll_info_by_id = {}

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.callback_query.register(self.callback_get_results, lambda c: c.data == "get_results")
        self.dp.callback_query.register(self.callback_get_joint_results, lambda c: c.data == "get_group_results")
        self.dp.callback_query.register(self.callback_edit_poll, lambda c: c.data == "edit_poll")
        self.dp.callback_query.register(self.callback_change_start_poll_time, lambda c: c.data == "change_start_poll_time")
        self.dp.poll.register(self.handle_poll_update)
        self.dp.poll_answer.register(self.handle_poll_answer)
        self.dp.message.register(self.handle_text_message) # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

    
    def escape_markdown(self, text: str) -> str:
        escape_chars = r'_*[]()~`>#+-=|{}.!'
        return ''.join(f'\\{char}' if char in escape_chars else char for char in text)
    
    async def handle_text_message(self, message: types.Message):
        target_stickers = ['AgADMAADr8ZRGg']

        if message.text == '?' or (message.sticker and message.sticker.file_unique_id in target_stickers):
            menu = await self.get_joint_results()
            await message.answer(menu, parse_mode="MarkdownV2")
    
    async def handle_poll_update(self, poll: types.Poll):
        if poll.id not in self.poll_ids:
            return

        # —Å–ø–ª–∏—Ç–∏–º –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ç–µ–∫—Å—Ç + –¥–∞—Ç—É
        poll_name, poll_date = poll.question.rsplit(' ', 1)

        # 1) –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–≤–∞—Ä—å
        # 1) –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º ¬´–∫–æ—Ä–∑–∏–Ω—É¬ª –ø–æ –¥–∞—Ç–µ:
        date_bucket = self.polls_dict.setdefault(poll_date, {})

        # 2) –í —ç—Ç–æ–π ¬´–∫–æ—Ä–∑–∏–Ω–µ¬ª –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–æ–∑–¥–∞—ë–º –∫–ª—é—á set_dish (–æ–Ω –±—É–¥–µ—Ç –æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö –æ–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å):
        date_bucket.setdefault('set_dish', {})

        # 3) –¢–µ–ø–µ—Ä—å —É–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º –æ–ø—Ä–æ—Å –±–µ–∑ –∫–ª—é—á–∞ set_dish –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ:
        date_bucket.setdefault(poll_name, {}).update({
            'id':      poll.id,
            'options': [o.text for o in poll.options],
            'votes':   [o.voter_count for o in poll.options],
        })

        # 2) –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ ID
        #    —Ö—Ä–∞–Ω–∏–º –¥–∞—Ç—É –∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        self.poll_info_by_id[str(poll.id)] = {
            'poll_question': poll_name,
            'poll_date': poll_date
        }

        print(self.polls_dict)

    async def handle_poll_answer(self, poll_answer: types.PollAnswer):
        user_id = poll_answer.user.id
        first_name = poll_answer.user.first_name
        poll_id = str(poll_answer.poll_id)
        chosen_options = poll_answer.option_ids

        now = datetime.now(TIMEZONE)

        print(now.hour, now.minute)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} (ID: {user_id}) –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –≤ –æ–ø—Ä–æ—Å–µ {poll_id}")
        print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–∏–Ω–¥–µ–∫—Å—ã): {chosen_options}")

        info = self.poll_info_by_id.get(poll_id)
        if not info:
            print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ info –¥–ª—è poll_id={poll_id}")
            return

        question = info['poll_question']   # ¬´–í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞¬ª –∏–ª–∏ ¬´–ì–∞—Ä–Ω–∏—Ä—ã¬ª
        date = info['poll_date']

        # —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        options = self.polls_dict[date][question]['options']
        chosen_texts = [options[i] for i in chosen_options]

        if question in ('–í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞', '–ì–∞—Ä–Ω–∏—Ä—ã'):
            # 1) –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–∞—Ç—ã –µ—Å—Ç—å —Å–ª–æ–≤–∞—Ä—å set_dish
            sd = self.polls_dict[date].setdefault('set_dish', {})

            # 2) –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤ –Ω—ë–º –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ user_id
            user_entry = sd.setdefault(user_id, {})

            # 3) –¥–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±–æ—Ä –ø–æ–¥ –∫–ª—é—á–æ–º –≤–æ–ø—Ä–æ—Å–∞
            user_entry[question] = chosen_texts

        # –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥: —Ç–µ–ø–µ—Ä—å –≤ self.polls_dict[date]['set_dish'][user_id]
        # –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ {'–í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞': [...], '–ì–∞—Ä–Ω–∏—Ä—ã': [...]}
        print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ set_dish –¥–ª—è –¥–∞—Ç—ã {date}:")
        print(self.polls_dict[date]['set_dish'])

    async def save_poll_id(self, chat_id: int, message_id: int):
        self.last_polls[chat_id] = message_id

    async def get_poll_results(self, bot, chat_id: int) -> Optional[types.Poll]:
        print(f"–¢–∏–ø last_polls: {type(self.last_polls)}")  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å dict
        print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {self.last_polls}")  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        print(chat_id)

        message_id = self.last_polls.get(chat_id)
        
        if not message_id:
            return None

        try:
            msg = await bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=None  # –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            )
            return msg.poll
        except:
            return None

    async def start_poll_scheduler(self, chat_id=None):
        if chat_id:
            self.poll_chats.add(chat_id)

        if not self.poll_task or self.poll_task.done():
            self.poll_task = asyncio.create_task(self._poll_scheduler())

    async def _poll_scheduler(self):
        while True:
            now = datetime.now(TIMEZONE)

            print(now.hour, now.minute)

            if(now.hour == POLL_START_HOUR  and now.minute == POLL_START_MINUTES):
                self.poll_ids = []
                await self._send_scheduled_poll()
            await asyncio.sleep(60)

    async def _send_scheduled_poll(self):
        now = datetime.now(TIMEZONE)

        poll_index = (now.weekday() + POLL_SHIFT) % 7

        if (poll_index == 5 or poll_index == 6):
            print('weekday ', poll_index)
            return

        print("Sending poll...")

        poll_date = datetime.now() + timedelta(days=POLL_SHIFT)

        polls = POLLS[poll_index]
        for current_poll in polls:
            sent_poll = await self.bot.send_poll(
                chat_id=CHAT_ID,
                question=f"{current_poll['question']} {poll_date.strftime('%d.%m')}",
                options=current_poll['options'],
                is_anonymous=current_poll['is_anonymous']
            )
            
            self.poll_ids.append(sent_poll.poll.id)

        await self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    async def cmd_start(self, message: types.Message):
        if message.chat.type == 'supergroup':
            await self.start_poll_scheduler(message.chat.id)
            await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        elif message.chat.type == 'private':
            await self.post_main_menu_buttons(message.chat.id)
    
    async def callback_change_start_poll_time(self, callback_query: types.CallbackQuery):
        await callback_query.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM \n–ü—Ä–∏–º–µ—Ä 12:00')
        

    async def callback_get_results(self, callback_query: types.CallbackQuery):
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            await callback_query.message.delete()
        except:
            pass

        chat_id = str(callback_query.message.chat.id)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if chat_id in self.last_results_message:
            try:
                await self.last_results_message[chat_id].delete()
            except:
                pass

        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É ¬´–¥–Ω—è –ø–∏—Ç–∞–Ω–∏—è¬ª
        now = datetime.now(TIMEZONE)
        if now.hour < POLL_START_HOUR and now.minute < POLL_START_MINUTES:
            date_string = now.strftime('%d.%m')
        else:
            now += timedelta(days=POLL_SHIFT)
            date_string = now.strftime('%d.%m')

        # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üóì *{self.escape_markdown(date_string)}*\n\n"

        if date_string in self.polls_dict:
            for poll_name, poll_data in self.polls_dict[date_string].items():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π –∫–ª—é—á set_dish
                if 'options' not in poll_data or 'votes' not in poll_data:
                    continue

                message += f"üçΩ *{self.escape_markdown(poll_name)}*:\n"
                for option, votes in zip(poll_data['options'], poll_data['votes']):
                    if votes == 0:
                        continue
                    message += f"  \\- `{self.escape_markdown(option)}`: _{votes}_ –≥–æ–ª–æ—Å–æ–≤\n"
                message += "\n"

            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–æ—Å—å
            if message.strip().endswith(f"*{self.escape_markdown(date_string)}*"):
                message += "–ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤."

            self.last_results_message[chat_id] = await callback_query.message.answer(
                message, parse_mode="MarkdownV2"
            )
        else:
            self.last_results_message[chat_id] = await callback_query.message.answer("–ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        await asyncio.sleep(1)
        await self.post_main_menu_buttons(callback_query.message.chat.id)
    
    async def get_joint_results(self):

        # –í—ã—á–∏—Å–ª—è–µ–º –Ω—É–∂–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–¥.–º–º'
        now = datetime.now(TIMEZONE)
        if now.hour < POLL_START_HOUR and now.minute < POLL_START_MINUTES:
            date_string = now.strftime('%d.%m')
        else:
            now += timedelta(days=POLL_SHIFT)
            date_string = now.strftime('%d.%m')

        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        header = f"üóì *{self.escape_markdown(date_string)}*\n\n"
        body = ""

        # –ï—Å–ª–∏ –ø–æ —ç—Ç–æ–π –¥–∞—Ç–µ –µ—Å—Ç—å –≥–æ–ª–æ—Å–∞
        bucket = self.polls_dict.get(date_string, {})
        set_dish = bucket.get('set_dish', {})

        first_poll = bucket.get('–ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞')
        if first_poll and 'options' in first_poll:
            body += "üç≤ *–ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞:*\n"
            for opt, cnt in zip(first_poll['options'], first_poll['votes']):
                if cnt:
                    body += f"  \\- `{self.escape_markdown(opt)}`: _{cnt}_\n"
            body += "\n"
            
        salad_poll = bucket.get('–°–∞–ª–∞—Ç—ã')
        if salad_poll and 'options' in salad_poll:
            body += "ü•ó *–°–∞–ª–∞—Ç—ã:*\n"
            for opt, cnt in zip(salad_poll['options'], salad_poll['votes']):
                if cnt:
                    body += f"  \\- `{self.escape_markdown(opt)}`: _{cnt}_\n"
        body += "\n"

        if set_dish:
            body += "üçΩÔ∏è *–í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞\\(–∫–æ–º–ø–ª–µ–∫—Ç—ã\\):*\n"
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –≤—ã–±–æ—Ä –≥–∞—Ä–Ω–∏—Ä–∞ + –≤—Ç–æ—Ä–æ–≥–æ –±–ª—é–¥–∞
            i = 1
            for user_id, choices in set_dish.items():
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ‚Äî –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–∞–∫—É—é-—Ç–æ —á–∞—Å—Ç—å,
                # –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º ¬´‚Äî¬ª
                main = choices.get('–í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞', ['‚Äî'])[0]
                side = choices.get('–ì–∞—Ä–Ω–∏—Ä—ã', ['‚Äî'])[0]

                if(main == '‚Äî'):
                    body += (
                        f"{i}\\. {self.escape_markdown(side)}\n"
                    )
                
                if(side == '‚Äî'):
                    body += (
                        f"{i}\\. {self.escape_markdown(main)}\n"
                    )

                if(main != '‚Äî' and side != '‚Äî'):
                    body += (
                        f"{i}\\. `{self.escape_markdown(main)}` \\+ `{self.escape_markdown(side)}`\n"
                    )

                i = i + 1
        else:
            body = "–ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = header + body

        return msg
        

    async def callback_get_joint_results(self, callback_query: types.CallbackQuery):
         # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            await callback_query.message.delete()
        except:
            pass

        chat_id = str(callback_query.message.chat.id)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if chat_id in self.last_results_message:
            try:
                await self.last_results_message[chat_id].delete()
            except:
                pass

        menu =  await self.get_joint_results()

        self.last_results_message[chat_id] = await callback_query.message.answer(
            menu, parse_mode="MarkdownV2"
        )

        # –ß–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await asyncio.sleep(1)
        await self.post_main_menu_buttons(callback_query.message.chat.id)

    async def callback_edit_poll(self, callback_query: types.CallbackQuery):
        try:
            await callback_query.message.delete()
        except:
            pass
        
        if self.last_get_poll_message:
            try:
                await self.last_get_poll_message.delete()
            except:
                pass

        self.last_get_poll_message = await callback_query.message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞")
        await asyncio.sleep(1)
        await self.post_main_menu_buttons(callback_query.message.chat.id)

    async def run(self):
        await self.dp.start_polling(self.bot)

    async def post_main_menu_buttons(self, chat_id):
        markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="get_results"),
             types.InlineKeyboardButton(text="–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="get_group_results")
             #types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="edit_poll"),
             #types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–æ–≤", callback_data="change_start_poll_time")
             ]
        ])

        await self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

async def shutdown(bot: TelegramBot):
    await bot.bot.close()

if __name__ == "__main__":    
    bot = TelegramBot()

    loop = asyncio.new_event_loop()
    try:
        loop.run_until_complete(bot.run())
    except KeyboardInterrupt:
        loop.run_until_complete(shutdown(bot))
    finally:
        loop.close()

   