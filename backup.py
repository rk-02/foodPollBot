import asyncio
import signal
from datetime import datetime, timedelta

import pandas as pd
from telegram import Update, Bot, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telethon import TelegramClient
from telethon.errors.rpcerrorlist import FloodWaitError  # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å FloodWait
from telethon.errors import (
    SessionPasswordNeededError,
    RPCError,
)  # –û–±—â–∏–µ –æ—à–∏–±–∫–∏ Telethon
import pytz
import json



# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7672011364:AAE8BjuFYq6YN6CRlj2MiY6yY6tAKJWoZIA"
CHAT_ID = -1002391359004
TIMEZONE = pytz.timezone('Asia/Yekaterinburg')
POLL_START = {'hour': 13, 'minutes': 39}
REMIND_START = {'hour': 20, 'minutes': 00}
POLL_SHIFT = 1
API_HASH = 'fc2925c0f23d660b14e5bd00d36efa95'
API_ID = 11609594

with open("schedule.json", "r", encoding="utf-8") as file:
    POLLS = json.load(file)

class PollBot:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.running = True
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.current_poll_message_id = None
        self.last_polls = []
        self.last_bot_message_id = None
        self.user_message_ids = {}

    async def delete_user_messages(self, chat_id, user_id):
        """–£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º"""
        if user_id in self.user_message_ids.get(chat_id, {}):
            for msg_id in self.user_message_ids[chat_id][user_id]:
                try:
                    await self.bot.delete_message(
                        chat_id=chat_id,
                        message_id=msg_id
                    )
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.user_message_ids[chat_id][user_id] = []

    async def track_user_message(self, chat_id, user_id, message_id):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
        if chat_id not in self.user_message_ids:
            self.user_message_ids[chat_id] = {}
        if user_id not in self.user_message_ids[chat_id]:
            self.user_message_ids[chat_id][user_id] = []
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö
        if len(self.user_message_ids[chat_id][user_id]) == 0 or \
        message_id > self.user_message_ids[chat_id][user_id][-1]:
            self.user_message_ids[chat_id][user_id].append(message_id)

    async def delete_previous_message(self, chat_id):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"""
        if self.last_bot_message_id:
            try:
                await self.bot.delete_message(
                    chat_id=chat_id,
                    message_id=self.last_bot_message_id
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
            self.last_bot_message_id = None

    async def send_message_with_delete(self, chat_id, text, reply_markup=None, parse_mode=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ"""
        await self.delete_previous_message(chat_id)
        message = await self.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        self.last_bot_message_id = message.message_id
        return message

    async def safe_delete_message(self, chat_id, message_id):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await self.bot.delete_message(
                chat_id=chat_id,
                message_id=message_id
            )
            return True
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
            return False

    async def send_scheduled_polls(self):
        while self.running:
            now = datetime.now(TIMEZONE)

            #if(now.weekday() + POLL_SHIFT == 5 or now.weekday() + POLL_SHIFT == 6):
            #    await asyncio.sleep(30)
            #    continue

            if now.hour == POLL_START['hour'] and now.minute == POLL_START['minutes']: 
                poll_number = (now.weekday() + POLL_SHIFT) % 7

                next_poll_date = now + timedelta(days=POLL_SHIFT)

                day_of_month = next_poll_date.day
                month = next_poll_date.month
                #formatted_date = f"{day_of_month:02d}.{month:02d}"
                formatted_date = f"14.04"

                for poll_data in POLLS[1]:
                    try:
                        #await self.delete_previous_message(CHAT_ID)
                        
                        if len(poll_data["options"]) == 1:
                            poll_data["options"].append("-")

                        poll_message = await self.bot.send_poll(
                            chat_id=CHAT_ID,
                            question=poll_data["question"] + ' ' + formatted_date,
                            options=poll_data["options"],
                            is_anonymous=poll_data["is_anonymous"]
                        )
                        self.current_poll_message_id = poll_message.message_id
                        poll_key = poll_data["question"]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –∫–ª—é—á
                        self.last_polls[poll_key] = {
                            "message_id": poll_message.message_id,
                            "question": poll_data["question"] + ' ' + formatted_date,
                            "options": poll_data["options"]
                        }
                        if len(self.last_polls) > num_of_polls:
                            self.last_polls = self.last_polls[:num_of_polls]
                        await asyncio.sleep(1)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")
                        
                await asyncio.sleep(60)
            await asyncio.sleep(30)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 12:00
            if now.hour == REMIND_START['hour'] and now.minute == REMIND_START['minutes']:
                try:
                    await self.bot.send_message(
                        chat_id=CHAT_ID,
                        text="üì¢ –ü—Ä–æ—Ö–æ–¥–∏–º –æ–ø—Ä–æ—Å, –∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª!"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(30)

    async def get_poll_results(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø—Ä–æ—Å–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ DataFrame.
        –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π DataFrame –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É.
        """

        client = TelegramClient('user_session', API_ID, API_HASH)

        channel = await client.get_entity(CHAT_ID)

        self.bot.send_message(
            chat_id=CHAT_ID,
            text='channel'
        )

        return
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–ª–∏–µ–Ω—Ç—É
            await client.start(phone=PHONE)
            channel = await client.get_entity(CHAT_ID)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø—Ä–æ—Å—ã
            polls = []
            for poll_data in self.last_polls.values():
                try:
                    msg = await client.get_messages(CHAT_ID, ids=poll_data["message_id"])
                    if msg and msg.media and hasattr(msg.media, 'poll'):
                        polls.append(msg)
                except:
                    continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
            excel_data = []
            for poll_msg in polls:
                poll = poll_msg.media.poll
                results = poll_msg.media.results

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
                question = (poll.question.text if hasattr(poll.question, 'text') 
                        else str(poll.question))
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                for answer in poll.answers:
                    answer_text = answer.text if hasattr(answer, 'text') else str(answer)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤
                    votes = 0
                    if results and results.results:
                        for r in results.results:
                            if r.option == answer.option:
                                votes = r.voters
                                break

                    if votes > 0:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–µ–∑ –≥–æ–ª–æ—Å–æ–≤
                        excel_data.append({
                            "–í–æ–ø—Ä–æ—Å": question,
                            "–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞": answer_text,
                            "–ì–æ–ª–æ—Å–æ–≤": votes,
                            "–î–∞—Ç–∞ –æ–ø—Ä–æ—Å–∞": poll_msg.date.strftime("%d.%m.%Y %H:%M")
                        })

            # –§–æ—Ä–º–∏—Ä—É–µ–º DataFrame
            df = pd.DataFrame(excel_data)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–ª—è Telegram
            if not df.empty:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
                grouped = df.groupby('–í–æ–ø—Ä–æ—Å')
                
                output = []
                for question, group in grouped:
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ–ø—Ä–æ—Å–∞
                    output.append(f"*{question}*")
                    
                    # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                    for _, row in group.iterrows():
                        option = row['–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞'].text
                        votes = row['–ì–æ–ª–æ—Å–æ–≤']
                        date = row['–î–∞—Ç–∞ –æ–ø—Ä–æ—Å–∞']
                        
                        output.append(
                            f"`{option}` - {votes} –≥–æ–ª.\n"
                        )
                    
                    output.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
                return "\n".join(output), df
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø—Ä–æ—Å–∞–º", pd.DataFrame()

        except Exception as e:
            error_msg = f"‚ùå *–û—à–∏–±–∫–∞:*\n```{str(e)}```"
            return error_msg, pd.DataFrame()
            
        finally:
            await client.disconnect()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.delete_user_messages(update.message.chat_id, update.message.from_user.id)
        await self.track_user_message(update.message.chat_id, update.message.from_user.id, update.message.message_id)
        
        keyboard = [["üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await self.send_message_with_delete(
            chat_id=update.message.chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –±–æ—Ç–∞
        if not (update.message.text.startswith("/") or 
                update.message.text in ["üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å"] or
                context.user_data.get("poll_edit_stage")):
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

        await self.delete_user_messages(update.message.chat_id, update.message.from_user.id)
        await self.track_user_message(update.message.chat_id, update.message.from_user.id, update.message.message_id)
        
        text = update.message.text

        if text == "üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã":
            user_message_id = update.message.message_id

            await self.send_message_with_delete(
                chat_id=update.message.chat_id,
                text="‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã..."
            )
            telegram_text, df = await self.get_poll_results()

            await self.send_message_with_delete(
                chat_id=update.message.chat_id,
                text='–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –∫—Ä–∏–≤–∞—è'
            )

            keyboard = [["üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            message = await self.bot.send_message(
                chat_id=update.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                reply_markup=reply_markup
            )
            self.last_bot_message_id = message.message_id

            return
            
            if isinstance(df, pd.DataFrame) and not df.empty:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ Telegram
                await self.send_message_with_delete(
                    chat_id=update.message.chat_id,
                    text=f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–æ–≤:*\n\n {telegram_text}",
                    parse_mode="Markdown"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel-—Ñ–∞–π–ª
                #file_name = "poll_results.xlsx"
                #df.to_excel(file_name, index=False)
                #with open(file_name, "rb") as file:
                #    await context.bot.send_document(
                #        chat_id=update.message.chat_id,
                #        document=file,
                #        caption="–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Excel"
                #    )
            else:
                await self.send_message_with_delete(
                    chat_id=update.message.chat_id,
                    text=telegram_text  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                )

            #await self.safe_delete_message(update.message.chat_id, user_message_id)
            
            keyboard = [["üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            message = await self.bot.send_message(
                chat_id=update.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                reply_markup=reply_markup
            )
            self.last_bot_message_id = message.message_id

        elif text == "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å":
            if not self.last_polls:
                await self.send_message_with_delete(
                    chat_id=update.message.chat_id,
                    text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
                )

                keyboard = [["üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await self.send_message_with_delete(
                    chat_id=update.message.chat_id,
                    text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                    reply_markup=reply_markup
                )

                return

            keyboard = []
            for i, poll in enumerate(self.last_polls, 1):
                keyboard.append([f"{i}. {poll['question'][:30]}..."])
            
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await self.send_message_with_delete(
                chat_id=update.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=reply_markup
            )
            context.user_data["poll_edit_stage"] = "select_poll"

        elif context.user_data.get("poll_edit_stage") == "select_poll":
            try:
                print(self.last_polls)
                selected_index = int(text.split(".")[0]) - 1
                if 0 <= selected_index < len(self.last_polls):
                    selected_poll = self.last_polls[selected_index]
                    context.user_data["selected_poll"] = selected_poll
                    context.user_data["poll_edit_stage"] = "enter_options"
                    
                    await self.send_message_with_delete(
                        chat_id=update.message.chat_id,
                        text=f"–í—ã–±—Ä–∞–Ω –æ–ø—Ä–æ—Å: {selected_poll['question']}\n"
                             "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
                        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∏—Ç—å"]], resize_keyboard=True)
                    )
                else:
                    await self.send_message_with_delete(
                        chat_id=update.message.chat_id,
                        text="–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    )
            except (ValueError, IndexError):
                await self.send_message_with_delete(
                    chat_id=update.message.chat_id,
                    text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞."
                )

        elif context.user_data.get("poll_edit_stage") == "enter_options":
            if text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å":
                await self.cancel_edit(update, context)
                return

            new_options = [opt.strip() for opt in text.split(",") if opt.strip()]
            if not new_options:
                await self.send_message_with_delete(
                    chat_id=update.message.chat_id,
                    text="–í—ã –Ω–µ –≤–≤–µ–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return

            context.user_data["new_options"] = new_options
            context.user_data["poll_edit_stage"] = "confirm"
            
            confirm_keyboard = [["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]]
            reply_markup = ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True)
            
            options_text = "\n".join(f"‚Ä¢ {opt}" for opt in new_options)
            await self.send_message_with_delete(
                chat_id=update.message.chat_id,
                text=f"–ù–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n{options_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:",
                reply_markup=reply_markup
            )

        elif context.user_data.get("poll_edit_stage") == "confirm":
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await self.safe_delete_message(update.message.chat_id, update.message.message_id)

            if text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
                selected_poll = context.user_data["selected_poll"]
                new_options = context.user_data["new_options"]
                
                # 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
                poll_key = selected_poll["question"].split(' ')[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                if poll_key in self.last_polls:
                    del self.last_polls[poll_key]
                
                # 2. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å
                new_poll = await self.bot.send_poll(...)
                
                # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
                self.last_polls[poll_key] = {
                    "message_id": new_poll.message_id,
                    "question": selected_poll["question"],
                    "options": new_options
                }
                
                try:
                    await self.bot.send_poll(
                        chat_id=CHAT_ID,
                        question=selected_poll["question"],
                        options=new_options,
                        is_anonymous=False
                    )
                    await self.send_message_with_delete(
                        chat_id=update.message.chat_id,
                        text="–û–ø—Ä–æ—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ"
                    )
                    
                    try:
                        await self.bot.delete_message(
                            chat_id=CHAT_ID,
                            message_id=selected_poll["message_id"]
                        )
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –æ–ø—Ä–æ—Å: {e}")

                    keyboard = [["üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å"]]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    await self.send_message_with_delete(
                        chat_id=update.message.chat_id,
                        text="–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=reply_markup
                    )
                    
                except Exception as e:
                    await self.send_message_with_delete(
                        chat_id=update.message.chat_id,
                        text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}"
                    )
                
                await self.cancel_edit(update, context)
                
            elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
                await self.cancel_edit(update, context)
            else:
                await self.send_message_with_delete(
                    chat_id=update.message.chat_id,
                    text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ."
                )

    async def cancel_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
        await self.safe_delete_message(update.message.chat_id, update.message.message_id)

        if "poll_edit_stage" in context.user_data:
            del context.user_data["poll_edit_stage"]
        if "selected_poll" in context.user_data:
            del context.user_data["selected_poll"]
        if "new_options" in context.user_data:
            del context.user_data["new_options"]
        
        keyboard = [["üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await self.send_message_with_delete(
            chat_id=update.message.chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            reply_markup=reply_markup
        )

    async def run(self):
        try:
            await self.application.initialize()
            self.application.add_handler(CommandHandler("start", self.start))
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

            asyncio.create_task(self.send_scheduled_polls())

            await self.application.start()
            await self.application.updater.start_polling()

            while self.running:
                await asyncio.sleep(1)

        except Conflict as e:
            print("‚ùó –ö–æ–Ω—Ñ–ª–∏–∫—Ç: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.")
        except Exception as e:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()

def signal_handler(signum, frame, bot):
    print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    bot.running = False

if __name__ == "__main__":
    bot = PollBot()
    signal.signal(signal.SIGINT, lambda s, f: signal_handler(s, f, bot))
    asyncio.run(bot.run())